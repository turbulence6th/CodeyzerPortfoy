Aşağıda "Codeyzer Portfoy" adlı; gram altın, gram gümüş, döviz, fonlar, emtialar ve hisse senetlerini içeren, anlık fiyatları çekip toplam portföy değerini ve varlık kırılımlarını gösteren bir React + TypeScript + Capacitor + Material-UI uygulamasını açıklayan güncel yol haritası bulunmaktadır.

────────────────────────────
1. İhtiyaçların Netleştirilmesi (Güncel Durum)
────────────────────────────
• Desteklenen Varlık Türleri
  – Gram Altın (GAU)
  – Gram Gümüş (XAG/TRY)
  – Döviz (USD/TRY, EUR/TRY)
  – Emtia (örn. Gümüş)
  – Borsa Yatırım Fonları (TEFAS kodu)
  – Hisse Senetleri (BIST kodu)

• Ana İşlevler
  1. Varlık ekleme / silme / güncelleme
  2. Anlık fiyatları otomatik çekme (manuel "Güncelle" butonu da)
  3. Portföy toplam değeri ve yüzde dağılımı
  4. Varlık bazlı detay ve not ekleme
  5. Kategori bazlı grafikler oluşturma
  6. Verilerin LocalStorage'da saklanması
  7. Biyometrik kimlik doğrulama (Mobil)

• Teknik Gereksinimler
  – Platform: Web (Vite) + Mobil (Capacitor)
  – React 18 + TypeScript
  – Material-UI (MUI v5)
  – Grafikler için: Recharts
  – Fiyat Verisi: Yahoo Finance (ücretsiz) + TEFAS RSS (fonlar)
  – State Yönetimi: Redux Toolkit, Redux Persist, Listener Middleware
  – Test: Vitest, React Testing Library, MSW (Mock Service Worker)
  – Routing: React Router DOM

────────────────────────────
2. Fiyat API'sini Seçme & Prototip
────────────────────────────
• Altın/Gümüş/Döviz/Hisse: Yahoo Finance quote/chart uçları (ücretsiz, 15 dk gecikmeli)
• Fon: TEFAS RSS (fon)
• Seçilen çözüm: Yahoo Finance (tüm varlıklar) + TEFAS RSS (fon). API anahtarı gerekmez.
• Hata payını azaltmak için response'lar TypeScript interface'lerinde modellenmiştir.

────────────────────────────
3. Proje Kurulumu (Mevcut Durum)
────────────────────────────
1) Kurulan Ana Bağımlılıklar:
   npm install @mui/material @emotion/react @emotion/styled axios recharts dayjs @reduxjs/toolkit react-redux redux-persist react-router-dom uuid
   npm install @capacitor/core @capacitor/android
   npm install --save-dev vitest @testing-library/react msw

2) Klasör Yapısı:
src/
  api/           → REST çağrıları (priceService, tefasService)
  components/    → UI bileşenleri (HoldingsList, PortfolioSummary vb.)
  contexts/      → ThemeContext, AuthContext
  store/         → Redux store, portfolioSlice, categorySlice
  hooks/         → usePrices, useBackButton
  models/        → TypeScript tipleri (types.ts)
  pages/         → Dashboard, Settings, CategoryCharts
  utils/         → Yardımcı fonksiyonlar
  App.tsx, main.tsx

────────────────────────────
4. Temel Altyapı ve Veri Modelleri (Güncel)
────────────────────────────
• MUI ThemeProvider + createTheme ile koyu/açık tema.
• React Router ile / (dashboard), /charts, /settings rotaları.
• Güncel Veri Modelleri (`src/models/types.ts`):

  ```ts
  // Varlık Tipi
  export type AssetType = 'CURRENCY' | 'FUND' | 'STOCK' | 'COMMODITY';

  // Temel Varlık Birimi
  export interface Holding {
    id: string;            // uuid
    type: AssetType;       // Varlık türü
    symbol: string;        // USDTRY, EURTRY, GAUTRY, XAGTRY, ISCTR
    name: string;          // Görünen ad
    amount: number;        // adet / gram
    note?: string;         // opsiyonel not
    createdAt: string;     // Oluşturma tarihi
    updatedAt: string;     // Güncelleme tarihi
  }

  // Kategori Yapısı
  export interface Category {
    id: string;
    name: string;
    color: string;
    holdingIds: string[]; // Bu kategoriye dahil varlık id'leri
  }

  // Kategori Grafiği Yapısı
  export interface CategoryChart {
    id: string;
    name: string;
    description?: string;
    categories: Category[];
  }
  ```

────────────────────────────
5. Fiyat Servisi
────────────────────────────
• `api/priceService.ts` ve `api/tefasService.ts` dosyalarında Axios ile API istekleri yönetilir.
• Fiyatlar, Redux store'da `priceCache` altında saklanarak gereksiz API çağrıları önlenir.
• `hooks/usePrices.ts` hook'u ile bileşenler fiyat verilerine kolayca erişir.

────────────────────────────
6. Bileşen Geliştirme Sırası (Mevcut)
────────────────────────────
Proje, `.cursorrules` dosyasında belirtilen bileşenlerin çoğunu içermektedir. Ek olarak `CategoryChartsList`, `AddCategoryChartDialog` gibi kategori yönetimi bileşenleri eklenmiştir.

────────────────────────────
7. Durum Yönetimi & Persist (Güncel Mimarisi)
────────────────────────────
• **Redux Toolkit** state yönetim merkezi olarak kullanılır.
• **Slice'lar:** State, `portfolioSlice` (varlıklar, fiyatlar) ve `categorySlice` (kategori grafikleri) olarak ikiye ayrılmıştır.
• **Kalıcılık (Persistence):** `redux-persist` kullanılarak her slice için ayrı konfigürasyonlarla state'in seçili kısımları (`holdings`, `charts` vb.) LocalStorage'a kaydedilir.
• **Listener Middleware:** Bir varlık silindiğinde, ilgili varlığın tüm kategorilerden de otomatik olarak silinmesi gibi işlemler için Redux listener middleware kullanılır. Bu, state tutarlılığını sağlar.

────────────────────────────
8. Test & Kalite
────────────────────────────
• **Birim ve Entegrasyon Testleri:** `vitest` ve `react-testing-library` ile yazılmıştır.
• **API Mocking:** Geliştirme ve test sırasında dış API'lara olan bağımlılığı kaldırmak için `msw` (Mock Service Worker) kullanılır.
• **Linting:** ESLint ile kod kalitesi standartları korunur.

────────────────────────────
9. Dağıtım
────────────────────────────
• **Web:** `vite build` komutu ile Vercel, Netlify gibi platformlara dağıtım yapılabilir.
• **Mobil (Android):**
  1. `npm run build`
  2. `npx cap sync android`
  3. Android Studio üzerinden APK derlemesi alınır.

────────────────────────────
10. Geliştirmeler
────────────────────────────
✓ Kullanıcı doğrulaması (geliştiriliyor - `AuthContext`, `LoginScreen` mevcut)
✓ Portföy getiri grafiği (geçmiş fiyat serileri çekerek)
✓ CSV/Excel içe-dışa aktarma
✓ Bildirim & alarm (fiyat eşiklerine ulaşınca)